{
    "apiVersion": "1.5.2",
    "apis": [
        {
            "operations": [
                {
                    "authorizations": {},
                    "method": "GET",
                    "nickname": "get_topic_by_topic_name",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "description": "Kafka topic name of the topic to be fetched",
                            "name": "topic_name",
                            "paramType": "path",
                            "required": true,
                            "type": "string"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 400,
                            "message": "Invalid topic_name supplied"
                        },
                        {
                            "code": 404,
                            "message": "Topic not found"
                        },
                        {
                            "code": 500,
                            "message": "Server side error"
                        }
                    ],
                    "summary": "Get the topic of specified topic name",
                    "type": "Topic"
                }
            ],
            "path": "/v1/topics/{topic_name}"
        },
        {
            "operations": [
                {
                    "authorizations": {},
                    "items": {
                        "$ref": "Schema"
                    },
                    "method": "GET",
                    "nickname": "list_schemas_by_topic_name",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "description": "Kafka topic name of the requested topic",
                            "name": "topic_name",
                            "paramType": "path",
                            "required": true,
                            "type": "string"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 400,
                            "message": "Invalid topic_name supplied"
                        },
                        {
                            "code": 404,
                            "message": "Topic not found"
                        },
                        {
                            "code": 500,
                            "message": "Server side error"
                        }
                    ],
                    "summary": "List all the schemas of specified topic. These schemas are full compatible to each other.",
                    "type": "array"
                }
            ],
            "path": "/v1/topics/{topic_name}/schemas"
        },
        {
            "operations": [
                {
                    "authorizations": {},
                    "method": "GET",
                    "nickname": "get_latest_schema_by_topic_name",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "description": "Kafka topic name of the requested topic",
                            "name": "topic_name",
                            "paramType": "path",
                            "required": true,
                            "type": "string"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 400,
                            "message": "Invalid topic_name supplied"
                        },
                        {
                            "code": 404,
                            "message": "Topic is not found., Latest schema is not found."
                        },
                        {
                            "code": 500,
                            "message": "Server side error"
                        }
                    ],
                    "summary": "Get the latest schema of specified topic",
                    "type": "Schema"
                }
            ],
            "path": "/v1/topics/{topic_name}/schemas/latest"
        },
        {
            "operations": [
                {
                    "authorizations": {},
                    "items": {
                        "$ref": "Topic"
                    },
                    "method": "GET",
                    "nickname": "get_topics_by_criteria",
                    "notes": "It is recommended to use this api with criteria since it doesn't support pagination at the moment, and querying all the topics may cause time-out.",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "description": "Name of the namespace the topics belong to",
                            "name": "namespace",
                            "paramType": "query",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "allowMultiple": false,
                            "description": "Name of the source the topics belong to.",
                            "name": "source",
                            "paramType": "query",
                            "required": false,
                            "type": "string"
                        },
                        {
                            "allowMultiple": false,
                            "description": "Unix timestamp the topics must be created after. The topics created at the same timestamp will be included.",
                            "name": "created_after",
                            "paramType": "query",
                            "required": false,
                            "type": "integer"
                        },
                        {
                            "allowMultiple": false,
                            "description": "Maximum number of topics to retrieve.",
                            "name": "count",
                            "paramType": "query",
                            "required": false,
                            "type": "integer"
                        },
                        {
                            "allowMultiple": false,
                            "description": "Limits results to those topics with an id greater than or equal to given min_id.",
                            "name": "min_id",
                            "paramType": "query",
                            "required": false,
                            "type": "integer"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 400,
                            "message": "Invalid query parameter(s) supplied"
                        },
                        {
                            "code": 500,
                            "message": "Server side error"
                        }
                    ],
                    "summary": "Get the topics that match specified criteria. If no criterion is specified, it returns all the topics.",
                    "type": "array"
                }
            ],
            "path": "/v1/topics"
        }
    ],
    "basePath": "http://169.254.255.254:20912",
    "consumes": [
        "application/json"
    ],
    "models": {
        "Namespace": {
            "id": "Namespace",
            "properties": {
                "created_at": {
                    "description": "When this namespace is created",
                    "format": "date-time",
                    "type": "string"
                },
                "name": {
                    "description": "Namespace, such as yelpmain.db, etc",
                    "type": "string"
                },
                "namespace_id": {
                    "description": "Namespace ID",
                    "type": "integer"
                },
                "updated_at": {
                    "description": "When this namespace is last updated",
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "Note": {
            "id": "Note",
            "properties": {
                "created_at": {
                    "description": "When this note is created",
                    "format": "date-time",
                    "type": "string"
                },
                "id": {
                    "description": "The id of the note",
                    "type": "integer"
                },
                "last_updated_by": {
                    "description": "The email of the user who edited the note",
                    "type": "string"
                },
                "note": {
                    "description": "The text of the note itself",
                    "type": "string"
                },
                "reference_id": {
                    "description": "The id of the item that this note is for",
                    "type": "integer"
                },
                "reference_type": {
                    "description": "The type of item that this note is for ('schema', or 'schema_element')",
                    "type": "string"
                },
                "updated_at": {
                    "description": "When this note is last updated",
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "Schema": {
            "id": "Schema",
            "properties": {
                "base_schema_id": {
                    "description": "The original Avro schema that this schema is transformed from",
                    "type": "integer"
                },
                "cluster_type": {
                    "description": "Type of kafka cluster this topic belongs to. See http://y/datapipe_cluster_types for more info on cluster_types.",
                    "type": "string"
                },
                "created_at": {
                    "description": "When this schema is created",
                    "format": "date-time",
                    "type": "string"
                },
                "note": {
                    "$ref": "Note",
                    "description": "A user defined note for the schema element that is used in the documentation tool. Used to store any relevant information about the schema element that can be useful to reference."
                },
                "primary_keys": {
                    "description": "List of primary key names.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "schema": {
                    "description": "Json formatted avro schema string.",
                    "type": "string"
                },
                "schema_id": {
                    "description": "Avro schema ID",
                    "type": "integer"
                },
                "status": {
                    "description": "Schema status: RW (read/write), R (read-only), Disabled. `Read` status means this schema can be used to deserialize messages, and `Write` status means this schema can be used to serialize messages. Disabled schemas cannot be used for either.",
                    "enum": [
                        "RW",
                        "R",
                        "Disabled"
                    ],
                    "type": "string"
                },
                "topic": {
                    "$ref": "Topic",
                    "description": "Topic that this schema is associated to"
                },
                "updated_at": {
                    "description": "When this schema is last updated",
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "Source": {
            "id": "Source",
            "properties": {
                "category": {
                    "description": "Category that this source belongs to",
                    "type": "string"
                },
                "created_at": {
                    "description": "When this source is created",
                    "format": "date-time",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the source, such as 'User' for table User.",
                    "type": "string"
                },
                "namespace": {
                    "$ref": "Namespace",
                    "description": "Namespace of the source"
                },
                "owner_email": {
                    "description": "Email address of the source owner",
                    "type": "string"
                },
                "source_id": {
                    "description": "Source ID",
                    "type": "integer"
                },
                "updated_at": {
                    "description": "When this source is last updated",
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "Topic": {
            "id": "Topic",
            "properties": {
                "contains_pii": {
                    "description": "Whether the messages in this topic contain PII.",
                    "type": "boolean"
                },
                "created_at": {
                    "description": "When this topic is created",
                    "format": "date-time",
                    "type": "string"
                },
                "name": {
                    "description": "The Kafka topic name.",
                    "type": "string"
                },
                "primary_keys": {
                    "description": "List of primary key names.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "source": {
                    "$ref": "Source",
                    "description": "Source of the Avro schema."
                },
                "topic_id": {
                    "description": "Topic ID",
                    "type": "integer"
                },
                "updated_at": {
                    "description": "When this topic is last updated",
                    "format": "date-time",
                    "type": "string"
                }
            }
        }
    },
    "produces": [
        "application/json"
    ],
    "resourcePath": "/v1/topics",
    "swaggerVersion": "1.2"
}
