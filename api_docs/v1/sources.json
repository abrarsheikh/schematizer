{
    "apiVersion": "1.1.0",
    "apis": [
        {
            "operations": [
                {
                    "authorizations": {},
                    "items": {
                        "$ref": "Source"
                    },
                    "method": "GET",
                    "nickname": "list_sources",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "description": "Maximum number of sources to retrieve.",
                            "name": "count",
                            "paramType": "query",
                            "required": false,
                            "type": "integer"
                        },
                        {
                            "allowMultiple": false,
                            "description": "Limits results to those sources with an id greater than or equal to given min_id.",
                            "name": "min_id",
                            "paramType": "query",
                            "required": false,
                            "type": "integer"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 500,
                            "message": "Server side error"
                        }
                    ],
                    "summary": "List all the sources",
                    "type": "array"
                }
            ],
            "path": "/v1/sources"
        },
        {
            "operations": [
                {
                    "authorizations": {},
                    "method": "GET",
                    "nickname": "get_source_by_id",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "name": "source_id",
                            "paramType": "path",
                            "required": true,
                            "type": "integer"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 400,
                            "message": "Invalid source ID supplied"
                        },
                        {
                            "code": 404,
                            "message": "Source ID not found"
                        },
                        {
                            "code": 500,
                            "message": "Server side error"
                        }
                    ],
                    "summary": "Get the source of specified ID",
                    "type": "Source"
                }
            ],
            "path": "/v1/sources/{source_id}"
        },
        {
            "operations": [
                {
                    "authorizations": {},
                    "method": "POST",
                    "nickname": "update_category",
                    "notes": "",
                    "parameters": [
                        {
                            "name": "body",
                            "paramType": "body",
                            "required": true,
                            "type": "CategoryRequest"
                        },
                        {
                            "allowMultiple": false,
                            "description": "ID of source that will have its category updated",
                            "name": "source_id",
                            "paramType": "path",
                            "required": true,
                            "type": "integer"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 400,
                            "message": "Invalid request"
                        },
                        {
                            "code": 404,
                            "message": "Source ID not found"
                        },
                        {
                            "code": 500,
                            "message": "Server side error"
                        }
                    ],
                    "summary": "Update the category of given source.",
                    "type": "CategoryResponse"
                },
                {
                    "authorizations": {},
                    "method": "DELETE",
                    "nickname": "delete_category",
                    "notes": "",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "description": "ID of source that will have its category deleted",
                            "name": "source_id",
                            "paramType": "path",
                            "required": true,
                            "type": "integer"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 400,
                            "message": "Invalid request"
                        },
                        {
                            "code": 404,
                            "message": "Source is not found., Category not found for the given source"
                        },
                        {
                            "code": 500,
                            "message": "Server side error"
                        }
                    ],
                    "summary": "Remove the source from current category.",
                    "type": "CategoryResponse"
                }
            ],
            "path": "/v1/sources/{source_id}/category"
        },
        {
            "operations": [
                {
                    "authorizations": {},
                    "items": {
                        "$ref": "Topic"
                    },
                    "method": "GET",
                    "nickname": "list_topics_by_source_id",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "name": "source_id",
                            "paramType": "path",
                            "required": true,
                            "type": "integer"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 400,
                            "message": "Invalid source ID supplied"
                        },
                        {
                            "code": 404,
                            "message": "Source ID not found"
                        },
                        {
                            "code": 500,
                            "message": "Server side error"
                        }
                    ],
                    "summary": "List all the topics of specified source",
                    "type": "array"
                }
            ],
            "path": "/v1/sources/{source_id}/topics"
        },
        {
            "operations": [
                {
                    "authorizations": {},
                    "method": "GET",
                    "nickname": "get_latest_topic_by_source_id",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "name": "source_id",
                            "paramType": "path",
                            "required": true,
                            "type": "integer"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 400,
                            "message": "Invalid source ID supplied."
                        },
                        {
                            "code": 404,
                            "message": "Latest topic is not found., Source is not found."
                        },
                        {
                            "code": 500,
                            "message": "Server side error."
                        }
                    ],
                    "summary": "Get the latest topic of specified source",
                    "type": "Topic"
                }
            ],
            "path": "/v1/sources/{source_id}/topics/latest"
        },
        {
            "operations": [
                {
                    "authorizations": {},
                    "method": "POST",
                    "nickname": "create_refresh",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "name": "source_id",
                            "paramType": "path",
                            "required": true,
                            "type": "integer"
                        },
                        {
                            "name": "body",
                            "paramType": "body",
                            "required": true,
                            "type": "CreateRefreshRequest"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 400,
                            "message": "Invalid request"
                        },
                        {
                            "code": 404,
                            "message": "Source is not found."
                        },
                        {
                            "code": 500,
                            "message": "Server side error"
                        }
                    ],
                    "summary": "Create a refresh associated with specified source id.",
                    "type": "Refresh"
                },
                {
                    "authorizations": {},
                    "items": {
                        "$ref": "Refresh"
                    },
                    "method": "GET",
                    "nickname": "list_refreshes_by_source_id",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "name": "source_id",
                            "paramType": "path",
                            "required": true,
                            "type": "integer"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 400,
                            "message": "Invalid request"
                        },
                        {
                            "code": 404,
                            "message": "Namespace is not found"
                        },
                        {
                            "code": 500,
                            "message": "Server side error"
                        }
                    ],
                    "summary": "List the history of refreshes on the specified source id.",
                    "type": "array"
                }
            ],
            "path": "/v1/sources/{source_id}/refreshes"
        },
        {
            "operations": [
                {
                    "authorizations": {},
                    "method": "POST",
                    "nickname": "register_source_meta_attribute_mapping",
                    "notes": "The source_id and the schema_id of Meta attribute schema should exist.",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "description": "ID of source for which meta attribute mappings will be registered",
                            "name": "source_id",
                            "paramType": "path",
                            "required": true,
                            "type": "integer"
                        },
                        {
                            "name": "body",
                            "paramType": "body",
                            "required": true,
                            "type": "RegisterMetaAttributeRequest"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 404,
                            "message": "Entity not found"
                        },
                        {
                            "code": 400,
                            "message": "Invalid request"
                        },
                        {
                            "code": 500,
                            "message": "Server side error"
                        }
                    ],
                    "summary": "Register the specified meta attribute schema_id to the specified source_id.",
                    "type": "MetaAttributeSourceMapping"
                },
                {
                    "authorizations": {},
                    "method": "DELETE",
                    "nickname": "delete_source_meta_attribute_mapping",
                    "notes": "The source_id and the schema_id of Meta attribute schema should exist.",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "description": "ID of source for which meta attribute mappings will be deleted",
                            "name": "source_id",
                            "paramType": "path",
                            "required": true,
                            "type": "integer"
                        },
                        {
                            "name": "body",
                            "paramType": "body",
                            "required": true,
                            "type": "RegisterMetaAttributeRequest"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 404,
                            "message": "Entity not found"
                        },
                        {
                            "code": 400,
                            "message": "Invalid request"
                        },
                        {
                            "code": 500,
                            "message": "Server side error"
                        }
                    ],
                    "summary": "Remove the specified meta attribute schema_id mapping from the specified source_id.",
                    "type": "MetaAttributeSourceMapping"
                },
                {
                    "authorizations": {},
                    "items": {
                        "$ref": "MetaAttributeSourceMapping"
                    },
                    "method": "GET",
                    "nickname": "get_source_meta_attribute_mappings",
                    "notes": "The source_id should exist.",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "description": "ID of source for which meta attributes will be fetched",
                            "name": "source_id",
                            "paramType": "path",
                            "required": true,
                            "type": "integer"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 400,
                            "message": "Invalid Source ID supplied"
                        },
                        {
                            "code": 404,
                            "message": "Source not found"
                        },
                        {
                            "code": 500,
                            "message": "Server side error"
                        }
                    ],
                    "summary": "Get a list of all meta attribute schema_ids mapped to specified source_id.",
                    "type": "array"
                }
            ],
            "path": "/v1/sources/{source_id}/meta_attr_mappings"
        }
    ],
    "basePath": "http://169.254.255.254:20912",
    "consumes": [
        "application/json"
    ],
    "models": {
        "CategoryRequest": {
            "id": "CategoryRequest",
            "properties": {
                "category": {
                    "description": "The updated category of a source",
                    "type": "string"
                }
            },
            "required": [
                "category"
            ]
        },
        "CategoryResponse": {
            "id": "CategoryResponse",
            "properties": {
                "category": {
                    "description": "The category that the specified source belongs to",
                    "type": "string"
                },
                "created_at": {
                    "description": "When this category is created",
                    "format": "date-time",
                    "type": "string"
                },
                "source_id": {
                    "description": "The id of the source this category specifies",
                    "type": "integer"
                },
                "updated_at": {
                    "description": "When this category is last updated",
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "CreateRefreshRequest": {
            "id": "CreateRefreshRequest",
            "properties": {
                "avg_rows_per_second_cap": {
                    "description": "This field throttles the throughput of the refresh runner once the refresh is actually run. It will sleep in between batch row gets to limit it to this cap (default: null)",
                    "type": "integer"
                },
                "batch_size": {
                    "description": "Number of rows to refresh per batch.",
                    "type": "integer"
                },
                "filter_condition": {
                    "description": "This field contains the expression used to filter the records that must be refreshed. E.g. It may be a MySQL where clause if the source of the refresh is a MySQL table.",
                    "type": "string"
                },
                "max_primary_key": {
                    "description": "The max primary key for refresh table",
                    "type": "integer"
                },
                "offset": {
                    "description": "Represents the last known position that has been refreshed.",
                    "type": "integer"
                },
                "priority": {
                    "description": "Priority of this refresh. LOW=20, MAX=100",
                    "type": "integer"
                }
            }
        },
        "MetaAttributeSourceMapping": {
            "id": "MetaAttributeSourceMapping",
            "properties": {
                "meta_attribute_schema_id": {
                    "description": "Avro Schema ID of meta attribute.",
                    "type": "integer"
                },
                "source_id": {
                    "description": "ID to distinguish a unique source.",
                    "type": "integer"
                }
            },
            "required": [
                "meta_attribute_schema_id",
                "source_id"
            ]
        },
        "Namespace": {
            "id": "Namespace",
            "properties": {
                "created_at": {
                    "description": "When this namespace is created",
                    "format": "date-time",
                    "type": "string"
                },
                "name": {
                    "description": "Namespace, such as yelpmain.db, etc",
                    "type": "string"
                },
                "namespace_id": {
                    "description": "Namespace ID",
                    "type": "integer"
                },
                "updated_at": {
                    "description": "When this namespace is last updated",
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "Refresh": {
            "id": "Refresh",
            "properties": {
                "avg_rows_per_second_cap": {
                    "description": "This field throttles the throughput of the refresh runner once the refresh is actually run. We will sleep in between batch row gets to limit it to this cap (default: null)",
                    "type": "integer"
                },
                "batch_size": {
                    "description": "Number of rows to refresh per batch.",
                    "type": "integer"
                },
                "created_at": {
                    "description": "When this refresh is created.",
                    "format": "date-time",
                    "type": "string"
                },
                "filter_condition": {
                    "description": "This field contains the expression used to filter the records that must be refreshed. E.g. It may be a MySQL where clause if the source of the refresh is a MySQL table.",
                    "type": "string"
                },
                "max_primary_key": {
                    "description": "The max primary key for refresh table",
                    "type": "integer"
                },
                "namespace_name": {
                    "description": "Name of the namespace the refresh is running on.",
                    "type": "string"
                },
                "offset": {
                    "description": "Represents the last known position that has been refreshed.",
                    "type": "integer"
                },
                "priority": {
                    "description": "Priority of this refresh. LOW=20, MAX=100",
                    "type": "integer"
                },
                "refresh_id": {
                    "description": "Refresh ID",
                    "type": "integer"
                },
                "source_name": {
                    "description": "Name of the source the refresh is running on.",
                    "type": "string"
                },
                "status": {
                    "description": "Current status of refresh.",
                    "enum": [
                        "NOT_STARTED",
                        "IN_PROGRESS",
                        "PAUSED",
                        "SUCCESS",
                        "FAILED"
                    ],
                    "type": "string"
                },
                "updated_at": {
                    "description": "When this refresh is last updated.",
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "RegisterMetaAttributeRequest": {
            "id": "RegisterMetaAttributeRequest",
            "properties": {
                "meta_attribute_schema_id": {
                    "description": "AvroSchema ID of Meta Attribute schema to be mapped.",
                    "type": "integer"
                }
            },
            "required": [
                "meta_attribute_schema_id"
            ]
        },
        "Source": {
            "id": "Source",
            "properties": {
                "category": {
                    "description": "Category that this source belongs to",
                    "type": "string"
                },
                "created_at": {
                    "description": "When this source is created",
                    "format": "date-time",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the source, such as 'User' for table User.",
                    "type": "string"
                },
                "namespace": {
                    "$ref": "Namespace",
                    "description": "Namespace of the source"
                },
                "owner_email": {
                    "description": "Email address of the source owner",
                    "type": "string"
                },
                "source_id": {
                    "description": "Source ID",
                    "type": "integer"
                },
                "updated_at": {
                    "description": "When this source is last updated",
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "Topic": {
            "id": "Topic",
            "properties": {
                "cluster_type": {
                    "description": "Type of kafka cluster this topic belongs to. See http://y/datapipe_cluster_types for more info on cluster_types.",
                    "type": "string"
                },
                "contains_pii": {
                    "description": "Whether the messages in this topic contain PII.",
                    "type": "boolean"
                },
                "created_at": {
                    "description": "When this topic is created",
                    "format": "date-time",
                    "type": "string"
                },
                "name": {
                    "description": "The Kafka topic name.",
                    "type": "string"
                },
                "primary_keys": {
                    "description": "List of primary key names.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "source": {
                    "$ref": "Source",
                    "description": "Source of the Avro schema."
                },
                "topic_id": {
                    "description": "Topic ID",
                    "type": "integer"
                },
                "updated_at": {
                    "description": "When this topic is last updated",
                    "format": "date-time",
                    "type": "string"
                }
            }
        }
    },
    "produces": [
        "application/json"
    ],
    "resourcePath": "/v1/sources",
    "swaggerVersion": "1.2"
}
