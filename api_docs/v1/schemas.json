{
    "apiVersion": "1.1.0",
    "apis": [
        {
            "operations": [
                {
                    "authorizations": {},
                    "method": "POST",
                    "nickname": "register_schema_from_mysql_stmts",
                    "notes": "If the namespace and source do not exist, Schematizer will create it automatically.",
                    "parameters": [
                        {
                            "name": "body",
                            "paramType": "body",
                            "required": true,
                            "type": "RegisterSchemaFromMySqlRequest"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 400,
                            "message": "Invalid request"
                        },
                        {
                            "code": 500,
                            "message": "Server side error"
                        }
                    ],
                    "summary": "Register an Avro Schema derived from Mysql statements to the latest topic of specified namespace and source.",
                    "type": "Schema"
                }
            ],
            "path": "/v1/schemas/mysql"
        },
        {
            "operations": [
                {
                    "authorizations": {},
                    "method": "POST",
                    "nickname": "register_schema",
                    "notes": "If the namespace and source do not exist, Schematizer will create it automatically.",
                    "parameters": [
                        {
                            "name": "body",
                            "paramType": "body",
                            "required": true,
                            "type": "RegisterSchemaRequest"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 400,
                            "message": "Invalid request"
                        },
                        {
                            "code": 500,
                            "message": "Server side error"
                        }
                    ],
                    "summary": "Register given Avro schema to the latest topic of specified namespace and source.",
                    "type": "Schema"
                }
            ],
            "path": "/v1/schemas/avro"
        },
        {
            "operations": [
                {
                    "authorizations": {},
                    "method": "GET",
                    "nickname": "get_schema_by_id",
                    "notes": "",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "description": "ID of schema that will be fetched",
                            "name": "schema_id",
                            "paramType": "path",
                            "required": true,
                            "type": "integer"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 400,
                            "message": "Invalid schema ID supplied"
                        },
                        {
                            "code": 404,
                            "message": "Schema not found"
                        },
                        {
                            "code": 500,
                            "message": "Server side error"
                        }
                    ],
                    "summary": "Get the schema of specified schema id.",
                    "type": "Schema"
                }
            ],
            "path": "/v1/schemas/{schema_id}"
        },
        {
            "operations": [
                {
                    "authorizations": {},
                    "items": {
                        "$ref": "SchemaElement"
                    },
                    "method": "GET",
                    "nickname": "get_schema_elements_by_schema_id",
                    "notes": "",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "description": "ID of schema that will be fetched",
                            "name": "schema_id",
                            "paramType": "path",
                            "required": true,
                            "type": "integer"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 400,
                            "message": "Invalid schema ID supplied"
                        },
                        {
                            "code": 404,
                            "message": "Schema not found"
                        },
                        {
                            "code": 500,
                            "message": "Server side error"
                        }
                    ],
                    "summary": "Get the schema elements of specified schema id.",
                    "type": "array"
                }
            ],
            "path": "/v1/schemas/{schema_id}/elements"
        },
        {
            "operations": [
                {
                    "authorizations": {},
                    "items": {
                        "$ref": "DataTarget"
                    },
                    "method": "GET",
                    "nickname": "get_data_targets_by_schema_id",
                    "notes": "",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "description": "ID of schema whose data targets will be fetched",
                            "name": "schema_id",
                            "paramType": "path",
                            "required": true,
                            "type": "integer"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 400,
                            "message": "Invalid schema ID supplied"
                        },
                        {
                            "code": 404,
                            "message": "Schema not found"
                        },
                        {
                            "code": 500,
                            "message": "Server side error"
                        }
                    ],
                    "summary": "Get the data targets of specified schema id.",
                    "type": "array"
                }
            ],
            "path": "/v1/schemas/{schema_id}/data_targets"
        },
        {
            "operations": [
                {
                    "authorizations": {},
                    "items": {
                        "$ref": "Schema"
                    },
                    "method": "GET",
                    "nickname": "get_schemas_created_after",
                    "notes": "",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "description": "It's the epoch timestamp and limits schemas to those created at or after this timestamp.",
                            "name": "created_after",
                            "paramType": "query",
                            "required": true,
                            "type": "integer"
                        },
                        {
                            "allowMultiple": false,
                            "description": "Maximum number of schemas to retrieve.",
                            "name": "count",
                            "paramType": "query",
                            "required": false,
                            "type": "integer"
                        },
                        {
                            "allowMultiple": false,
                            "description": "Limits results to those schemas with an id greater than or equal to given min_id.",
                            "name": "min_id",
                            "paramType": "query",
                            "required": false,
                            "type": "integer"
                        },
                        {
                            "allowMultiple": false,
                            "description": "Set to True to include disabled schemas. Default it excludes disabled ones.",
                            "name": "include_disabled",
                            "paramType": "query",
                            "required": false,
                            "type": "boolean"
                        }
                    ],
                    "responseMessages": [],
                    "summary": "Get the Avro schemas created after the specified created_after timestamp. Default it excludes disabled schemas.",
                    "type": "array"
                }
            ],
            "path": "/v1/schemas"
        },
        {
            "operations": [
                {
                    "authorizations": {},
                    "items": {
                        "type": "integer"
                    },
                    "method": "GET",
                    "nickname": "get_meta_attributes_by_schema_id",
                    "notes": "The avro schema id should exist.",
                    "parameters": [
                        {
                            "allowMultiple": false,
                            "description": "Schema ID for which Meta Attributes will be fetched",
                            "name": "schema_id",
                            "paramType": "path",
                            "required": true,
                            "type": "integer"
                        }
                    ],
                    "responseMessages": [
                        {
                            "code": 400,
                            "message": "Invalid schema ID supplied"
                        },
                        {
                            "code": 404,
                            "message": "Schema not found"
                        },
                        {
                            "code": 500,
                            "message": "Server side error"
                        }
                    ],
                    "summary": "Get list of all required meta attributes for specified schema_id.",
                    "type": "array"
                }
            ],
            "path": "/v1/schemas/{schema_id}/meta_attributes"
        }
    ],
    "basePath": "http://169.254.255.254:20912",
    "consumes": [
        "application/json"
    ],
    "models": {
        "DataTarget": {
            "id": "DataTarget",
            "properties": {
                "created_at": {
                    "description": "When this data target is created. This should be a datetime string in UTC, such as '2016-07-13T18:44:01.090Z'",
                    "format": "date-time",
                    "type": "string"
                },
                "data_target_id": {
                    "description": "Data target ID",
                    "type": "integer"
                },
                "destination": {
                    "description": "Url that connects to the data target, such as Redshift cluster connection url.",
                    "type": "string"
                },
                "name": {
                    "description": "Data target name",
                    "type": "string"
                },
                "target_type": {
                    "description": "Short description of the data target type, such as Redshift.",
                    "type": "string"
                },
                "updated_at": {
                    "description": "When this data target is last updated",
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "Namespace": {
            "id": "Namespace",
            "properties": {
                "created_at": {
                    "description": "When this namespace is created",
                    "format": "date-time",
                    "type": "string"
                },
                "name": {
                    "description": "Namespace, such as yelpmain.db, etc",
                    "type": "string"
                },
                "namespace_id": {
                    "description": "Namespace ID",
                    "type": "integer"
                },
                "updated_at": {
                    "description": "When this namespace is last updated",
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "Note": {
            "id": "Note",
            "properties": {
                "created_at": {
                    "description": "When this note is created",
                    "format": "date-time",
                    "type": "string"
                },
                "id": {
                    "description": "The id of the note",
                    "type": "integer"
                },
                "last_updated_by": {
                    "description": "The email of the user who edited the note",
                    "type": "string"
                },
                "note": {
                    "description": "The text of the note itself",
                    "type": "string"
                },
                "reference_id": {
                    "description": "The id of the item that this note is for",
                    "type": "integer"
                },
                "reference_type": {
                    "description": "The type of item that this note is for ('schema', or 'schema_element')",
                    "type": "string"
                },
                "updated_at": {
                    "description": "When this note is last updated",
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "RegisterMetaAttributeRequest": {
            "id": "RegisterMetaAttributeRequest",
            "properties": {
                "meta_attribute_schema_id": {
                    "description": "AvroSchema ID of Meta Attribute schema to be mapped.",
                    "type": "integer"
                }
            },
            "required": [
                "meta_attribute_schema_id"
            ]
        },
        "RegisterSchemaFromMySqlRequest": {
            "id": "RegisterSchemaFromMySqlRequest",
            "properties": {
                "alter_table_stmt": {
                    "description": "The ALTER TABLE statement from the table schema change. For the change in the existing table, both old_create_table_stmt and alter_table_stmt must be provided.",
                    "type": "string"
                },
                "contains_pii": {
                    "description": "Whether the schema contains PII field.",
                    "type": "boolean"
                },
                "namespace": {
                    "description": "Namespace this Avro schema belongs to, such as yelpmain.db, etc",
                    "type": "string"
                },
                "new_create_table_stmt": {
                    "description": "The CREATE TABLE statement of a new table or the updated table.",
                    "type": "string"
                },
                "old_create_table_stmt": {
                    "description": "The CREATE TABLE statement of the old table. For the change in the existing table, both old_create_table_stmt and alter_table_stmt must be provided.",
                    "type": "string"
                },
                "source": {
                    "description": "Source of the Avro schema, such as table User, or log service.foo etc",
                    "type": "string"
                },
                "source_owner_email": {
                    "description": "Email address of the source owner",
                    "type": "string"
                }
            },
            "required": [
                "new_create_table_stmt",
                "namespace",
                "source",
                "source_owner_email",
                "contains_pii"
            ]
        },
        "RegisterSchemaRequest": {
            "id": "RegisterSchemaRequest",
            "properties": {
                "base_schema_id": {
                    "description": "The original Avro schema that this schema is transformed from",
                    "type": "integer"
                },
                "cluster_type": {
                    "description": "Type of kafka cluster this topic belongs to. See http://y/datapipe_cluster_types for more info on cluster_types.",
                    "type": "string"
                },
                "contains_pii": {
                    "description": "Whether the schema contains PII field.",
                    "type": "boolean"
                },
                "namespace": {
                    "description": "Namespace this Avro schema belongs to, such as yelpmain.db, etc",
                    "type": "string"
                },
                "schema": {
                    "description": "The json formatted string of the avro schema to be registered",
                    "type": "string"
                },
                "source": {
                    "description": "Source of the Avro schema, such as table User, or log service.foo etc",
                    "type": "string"
                },
                "source_owner_email": {
                    "description": "Email address of the source owner",
                    "type": "string"
                }
            },
            "required": [
                "schema",
                "namespace",
                "source",
                "source_owner_email",
                "contains_pii"
            ]
        },
        "Schema": {
            "id": "Schema",
            "properties": {
                "base_schema_id": {
                    "description": "The original Avro schema that this schema is transformed from",
                    "type": "integer"
                },
                "created_at": {
                    "description": "When this schema is created",
                    "format": "date-time",
                    "type": "string"
                },
                "note": {
                    "$ref": "Note",
                    "description": "A user defined note for the schema that is used in the documentation tool. Used to store any relevant information about the schema that can be useful to reference."
                },
                "primary_keys": {
                    "description": "List of primary key names.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "required_meta_attr_schema_ids": {
                    "description": "List of MetaAttribute schema IDs required for this schema.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "schema": {
                    "description": "Json formatted avro schema string.",
                    "type": "string"
                },
                "schema_id": {
                    "description": "Avro schema ID",
                    "type": "integer"
                },
                "status": {
                    "description": "Schema status: RW (read/write), R (read-only), Disabled. `Read` status means this schema can be used to deserialize messages, and `Write` status means this schema can be used to serialize messages. Disabled schemas cannot be used for either.",
                    "enum": [
                        "RW",
                        "R",
                        "Disabled"
                    ],
                    "type": "string"
                },
                "topic": {
                    "$ref": "Topic",
                    "description": "Topic that this schema is associated to"
                },
                "updated_at": {
                    "description": "When this schema is last updated",
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "SchemaElement": {
            "id": "SchemaElement",
            "properties": {
                "created_at": {
                    "description": "When this schema element is created",
                    "format": "date-time",
                    "type": "string"
                },
                "doc": {
                    "description": "Documentation of this element",
                    "type": "string"
                },
                "element_type": {
                    "description": "Avro type of the element, such as record, field, etc.",
                    "type": "string"
                },
                "id": {
                    "description": "Avro schema element ID",
                    "type": "integer"
                },
                "key": {
                    "description": "Unique key to avro schema element of the enclosing avro schema",
                    "type": "string"
                },
                "note": {
                    "$ref": "Note",
                    "description": "A user defined note for the schema element that is used in the documentation tool. Used to store any relevant information about the schema element that can be useful to reference."
                },
                "schema_id": {
                    "description": "Avro schema ID this element belongs to",
                    "type": "integer"
                },
                "updated_at": {
                    "description": "When this schema element is last updated",
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "Source": {
            "id": "Source",
            "properties": {
                "category": {
                    "description": "Category that this source belongs to",
                    "type": "string"
                },
                "created_at": {
                    "description": "When this source is created",
                    "format": "date-time",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the source, such as 'User' for table User.",
                    "type": "string"
                },
                "namespace": {
                    "$ref": "Namespace",
                    "description": "Namespace of the source"
                },
                "owner_email": {
                    "description": "Email address of the source owner",
                    "type": "string"
                },
                "source_id": {
                    "description": "Source ID",
                    "type": "integer"
                },
                "updated_at": {
                    "description": "When this source is last updated",
                    "format": "date-time",
                    "type": "string"
                }
            }
        },
        "Topic": {
            "id": "Topic",
            "properties": {
                "contains_pii": {
                    "description": "Whether the messages in this topic contain PII.",
                    "type": "boolean"
                },
                "created_at": {
                    "description": "When this topic is created",
                    "format": "date-time",
                    "type": "string"
                },
                "name": {
                    "description": "The Kafka topic name.",
                    "type": "string"
                },
                "primary_keys": {
                    "description": "List of primary key names.",
                    "items": {
                        "type": "string"
                    },
                    "type": "array"
                },
                "source": {
                    "$ref": "Source",
                    "description": "Source of the Avro schema."
                },
                "topic_id": {
                    "description": "Topic ID",
                    "type": "integer"
                },
                "updated_at": {
                    "description": "When this topic is last updated",
                    "format": "date-time",
                    "type": "string"
                }
            }
        }
    },
    "produces": [
        "application/json"
    ],
    "resourcePath": "/v1/schemas",
    "swaggerVersion": "1.2"
}
